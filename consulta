import json
import pandas as pd
import numpy as np

def convint(elec):
    try:
        eleccion = int(elec)
        return eleccion
    except ValueError:
        print("Valor Inválido")
        return -1
    
def askoptions(matrix):
    flag = 0
    opciones_posibles={1, 2, 3, 4, 5, 99}
    while flag != 1:
        print("""
              
              AGREGAR / ELIMINAR stock: 1
              AGREGAR / ELIMINAR articulos: 2
              CONSULTAR stock total: 3
              CONSULTAR stock de un ART: 4
              CONSULTAR stock específico: 5 
              Salir: 99
              
              """)
        print("Elija una opción: ")
        eleccion_pre_int = input()
        eleccion = convint(eleccion_pre_int)
        
        flag = checker_opt(eleccion, opciones_posibles)
        
        
    if eleccion == 99:
        print("""Gracias por usar nuestro software
              Saliendo...""")
        
    if eleccion == 1:
        # agregar_stock(matrix)
        fastadd(matrix)
        
    if eleccion == 2:
        ag_el_a(matrix)
        
    if eleccion == 3:
        stock = chequear_stock_general(matrix)
        print(matrix)
        print("El stock total es de: ", stock)
        
    if eleccion == 4:
        stock_art()
        
    if eleccion == 5:
        stock_esp()

def guardar(matrix):
    csv = 'prueba.csv'
    df = pd.DataFrame(matrix)
    df.to_csv(csv, index=False, header=False)  # Guardar sin header

def fastadd(matrix):
    print("Matriz actual:")
    print(matrix)
    print("A continuación deberá ingresar el número de artículo para agregar o eliminar stock.")
    
    articulo, color, cantidad, precio, talle = -1,-1, -1, -1, -1
    linea = []


    while articulo == -1:
        articulo_pre = input("Ingrese un artículo: ")
        articulo = convint(articulo_pre)
    linea.append(articulo)
    
    while color == -1:
        color = input("Ingrese un color: ")
    linea.append(color)

    while talle == -1:
        talle_pre = input("Ingrese un talle: ")
        talle = convint(talle_pre)
    linea.append(talle)

    accion = ""
    while accion not in ["AGREGAR", "ELIMINAR"]:
        accion = input("¿Desea AGREGAR o ELIMINAR stock?: ").upper()

    while cantidad == -1:
        cantidad_pre = input(f"Ingrese una cantidad para {accion}: ")
        cantidad = convint(cantidad_pre)

    articulo_existe = False
    lista_nuevaa = matrix
    for i in range(len(lista_nuevaa)):
        if lista_nuevaa[i][0] != articulo:
            lista_nuevaa = [articulo for articulo in lista_nuevaa if articulo[0] == articulo]
        break
        

    if articulo_existe:
        if accion == "AGREGAR":
            matrix[i][3] = int(matrix[i][3]) + cantidad  # stock tiene que ser un numero
            print(f"Stock actualizado para el artículo {articulo} con color {color} y talle {talle}. Nueva cantidad: {matrix[i][3]}")
            guardar(matrix)
            askoptions(matrix)

        elif accion == "ELIMINAR":
            if int(matrix[i][3]) >= cantidad:
                matrix[i][3] = int(matrix[i][3]) - cantidad
                print(f"Stock actualizado para el artículo {articulo} con color {color} y talle {talle}. Nueva cantidad: {matrix[i][3]}")
                guardar(matrix)
                askoptions(matrix)
            else:
                print(f"Error: No se puede eliminar {cantidad} unidades. Solo hay {matrix[i][3]} en stock.")
            

    if not articulo_existe and accion == "AGREGAR":
        while precio == -1:
            precio_pre = input("Ingrese un precio para el nuevo artículo: ")
            precio = convint(precio_pre)
        linea.append(cantidad)
        linea.append(precio) 

        linea = np.expand_dims(linea, axis=0)
        
        matrix = np.append(matrix, linea, axis=0)  
        print(f"Nuevo artículo agregado: {linea}")
        guardar(matrix)
        askoptions(matrix)

    elif not articulo_existe and accion == "ELIMINAR":
        print("Error: No se puede eliminar stock de un artículo que no existe.")


